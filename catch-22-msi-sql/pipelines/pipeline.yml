name: $(BuildDefinitionName).$(Build.BuildId)

trigger: none

variables:
  Environment: catch22-$(Build.BuildId)
  DatabaseName: ExampleDb
  WorkingDirectory: $(System.DefaultWorkingDirectory)/catch-22-msi-sql

pool:
  vmImage: 'windows-2019'

steps:

  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: latest

  - task: TerraformCLI@0
    displayName: Initialise Terraform
    inputs:
      command: init
      workingDirectory: $(WorkingDirectory)/terraform
      
  - task: TerraformCLI@0
    displayName: Create Terraform plan
    inputs:
      command: plan
      workingDirectory: $(WorkingDirectory)/terraform
      environmentServiceName: $(PipelineServiceConnection)
      commandOptions: -out=tf.plan
    env:
      TF_VAR_environment_name: $(Environment)
      TF_VAR_database_name: $(DatabaseName)

  - task: TerraformCLI@0
    displayName: Terraform environment
    inputs:
      command: apply
      workingDirectory: $(WorkingDirectory)/terraform
      environmentServiceName: $(PipelineServiceConnection)
      commandOptions: tf.plan

  - task: TerraformCLI@0
    displayName: Get Terraform outputs
    inputs:
      command: output
      workingDirectory: $(WorkingDirectory)/terraform
      environmentServiceName: $(PipelineServiceConnection)

  - powershell: |
      Write-Host $(TF_OUT_sql_server_name)
      Write-Host $(TF_OUT_data_factory_name)

  - task: SqlAzureDacpacDeployment@1
    displayName: Grant SQL access to Data Factory MSI
    inputs:
      azureSubscription: $(PipelineServiceConnection)
      authenticationType: aadAuthenticationIntegrated
      serverName: $(TF_OUT_sql_server_name).database.windows.net
      databaseName: $(DatabaseName)
      deployType: InlineSqlTask
      sqlInline: |
        CREATE USER [$(TF_OUT_data_factory_name)] FROM EXTERNAL PROVIDER
        ALTER ROLE [db_owner] ADD MEMBER [$(TF_OUT_data_factory_name)]
